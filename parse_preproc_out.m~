% save matlab out struct as a continuous matrix for easy loading into
% python

%% define path to out structure
out_fname = '/userdata/lgwilliams/neuropixels/data/NP04/out_structs/mkl_preproc_out_1000.mat';
rootZ = '/userdata/lgwilliams/neuropixels/data/NP04/raw/NP04_B2_g0/NP04_B2_g0_imec0';

% load the out
load(out_fname);

% get the phonetic info
phn_evnt = table2struct(readtable(fullfile(rootZ, 'NP04_phon_events.csv')));

%% phn set up 

% get the phoneme categories
phn_cats = [];
for ii = 1:length(phn_evnt)
   phn_cats = [phn_cats; string(phn_evnt(ii).phoneme)];
end
phn_cats = unique(phn_cats);

% define the features of interest
phonetic_features = ["word_onset"; "phonation_v"; "manner_o"; "manner_a"; ...
                     'manner_v'; 'manner_f'; 'manner_n'; "place_l"; ...
                     "place_v"; "place_h"; "place_c"; "place_g"; ...
                     "place_lo"; "place_m"; "place_d"; "frontback_f"; ...
                     "frontback_b";"frontback_n"; "roundness_u"; ...
                     "roundness_r"; "centrality_n"; "centrality_f"; ...
                     "centrality_c"];

%% generate continous matrices

% params
n_sents = length(out);
n_sua = size(out(1).spikes_sua, 1);
n_mel = size(out(1).aud, 1);
concat_length = 643100;  % overshoot a bit 

% init files
sua_spikes = zeros(n_sua, concat_length);
mel_spec = zeros(n_mel, concat_length);
phn_tc = zeros(length(phn_cats), concat_length);
feature_tc = zeros(length(phonetic_features)+1, concat_length);

%% loop through and make res

smin = 1;
for si = 1:n_sents
    
    % get sentence data
    this_sua = out(si).spikes_sua;
    
    % get mel data - downsample: this is an error in making the out
    this_mel = out(si).aud;
    
    % determine the size of this sentence
    n_samps = size(this_sua, 2);
    smax = smin + n_samps - 1;
    
    % add data to the preallocation
    sua_spikes(:, smin:smax) = this_sua;
    mel_spec(:, smin:smax) = this_mel(:, 1:smax-smin+1);
    
    % add the phoneme stuff
    sentence_label = out(si).name;
    for phn_i = 1:length(phn_evnt)
        
        % phn onset
        onset = floor(phn_evnt(phn_i).start / 16);
        offset = floor(phn_evnt(phn_i).stop / 16);
        dur = offset - onset;
        onset = onset + 500 + smin; % add the 500 ms shift and time since last one
        
        % add the phoneme category
        p_idx = find(phn_cats == phn_evnt(phn_i).phoneme);
        phn_tc(p_idx, onset:onset+dur) = 1;
        
        % get the fields
        fields = fieldnames(phn_evnt(phn_i));
        for fi = 1:length(fields)
            f = fields(fi);
            f_idx = find(f == phonetic_features);
            if length(f_idx) > 0
                val = eval(string(strcat('phn_evnt(phn_i).', f)));
                feature_tc(f_idx, onset:onset+dur) = val;
            end
        end
        
        % add sentence onset
        if phn_i == 1
            feature_tc(end, onset:onset+dur) = 1;
        end
        
    end
        
    % update the smin
    smin = smax;
    
    % how we doin?
    disp(si);
   
end

%% save it
save_mel_fname = '/userdata/lgwilliams/neuropixels/data/NP04/out_structs/mkl_mel-1000.mat';
save_sua_fname = '/userdata/lgwilliams/neuropixels/data/NP04/out_structs/mkl_sua-1000.mat';
save_phn_fname = '/userdata/lgwilliams/neuropixels/data/NP04/out_structs/mkl_mel-1000.mat';
save_fea_fname = '/userdata/lgwilliams/neuropixels/data/NP04/out_structs/mkl_sua-1000.mat';

save(save_mel_fname, 'mel_spec', '-v7');
save(save_sua_fname, 'sua_spikes', '-v7');
save(save_mel_fname, 'mel_spec', '-v7');
save(save_sua_fname, 'sua_spikes', '-v7');